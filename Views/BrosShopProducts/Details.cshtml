@model WebApp2.Models.BrosShopProduct

@{
    ViewData["Title"] = "Details";
    var images = Model.BrosShopImages.ToList(); // Преобразуем в список
    var defaultImageUrl = Url.Content("~/source/no_photo.jpg"); // URL изображения по умолчанию
    bool hasImages = false; // Флаг для отслеживания наличия изображений
}

<!-- Подключение Bootstrap CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

<!-- Подключение jQuery и Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

<h1>@Model.BrosShopTitle</h1>

<div class="row">
    <div class="col-md-6">
        <div id="productCarousel" class="carousel slide carousel-fade" data-ride="carousel">
            <div class="carousel-inner">
                @for (int i = 0; i < images.Count; i++)
                {
                    var imageInCollection = images[i];
                    if (imageInCollection != null) // Проверка на наличие изображения
                    {
                        hasImages = true;
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <div class="image-container">
                                @{
                                    // Получаем URL изображения
                                    var imageUrl = Url.Action("GetImage", "BrosShopImages", new { imageId = imageInCollection.BrosShopImagesId });
                                }
                                <img src="@imageUrl" class="fixed-image" alt="Image for @Model.BrosShopTitle" onerror="this.onerror=null;" />
                            </div>
                        </div>
                    }
                }

                @if (!hasImages) // Если изображения не найдены, выводим изображение по умолчанию
                {
                    <div class="carousel-item active">
                        <div class="image-container">
                            <img src="@defaultImageUrl" class="fixed-image" alt="Image for @Model.BrosShopTitle" onerror="this.onerror=null;" />
                        </div>
                    </div>
                }
            </div>
            <a class="carousel-control-prev" href="#productCarousel" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#productCarousel" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>

    <div class="col-md-6">
        <div class="col-md-8">
            <h4>Детали товара</h4>
            <dl class="row">
                <dt class="col-sm-4 mb-2">
                    <strong>Цена:</strong>
                </dt>
                <dd class="col-sm-8 mb-2">
                    @Html.DisplayFor(model => model.BrosShopPrice)
                </dd>
                <dt class="col-sm-4 mb-2">
                    <strong>Скидка (%):</strong>
                </dt>
                <dd class="col-sm-8 mb-2">
                    @Html.DisplayFor(model => model.BrosShopDiscountPercent)
                </dd>
                <dt class="col-sm-4 mb-2">
                    <strong>Артикул:</strong>
                </dt>
                <dd class="col-sm-8 mb-2">
                    @Html.DisplayFor(model => model.BrosShopWbarticul)
                </dd>
                <dt class="col-sm-4 mb-2">
                    <strong>Категория:</strong>
                </dt>
                <dd class="col-sm-8 mb-2">
                    @Html.DisplayFor(model => model.BrosShopCategory.BrosShopCategoryId)
                </dd>
            </dl>
            <div>
                @if (Model.BrosShopProductAttributes != null && Model.BrosShopProductAttributes.Any())
                {
                    foreach (var attribute in Model.BrosShopProductAttributes)
                    {
                        // Проверяем, есть ли BrosShopSizeNavigation и его значение
                        if (attribute.BrosShopSizeNavigation != null)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="sizeId" id="size_@(attribute.BrosShopSizeNavigation.SizeId)" value="@(attribute.BrosShopSizeNavigation.SizeId)" required />
                                <label class="form-check-label" for="size_@(attribute.BrosShopSizeNavigation.SizeId)">
                                    Размер @(attribute.BrosShopSizeNavigation.Size) <!-- Отображаем название размера -->
                                </label>
                            </div>
                        }
                    }
                }
                else
                {
                    <p>Размеры не доступны.</p> <!-- Сообщение, если размеры отсутствуют -->
                }
            </div>

            <h4>Описание</h4>
            <p>
                @Html.DisplayFor(model => model.BrosShopDescription)
            </p>
        </div>
        <!-- Форма для добавления товара в корзину -->
        <form id="addToCartForm" asp-action="AddToCart" method="post">
            <input type="hidden" name="productId" value="@Model.BrosShopProductId" />
            <input type="number" name="quantity" value="1" min="1" max="100" step="1" class="form-control" style="width: 100px; display: inline-block;" />
            <button type="submit" class="btn btn-primary">Добавить в корзину</button>
            <div id="remainingQuantity" class="mt-2">Осталось добавить: 100 единиц.</div>
            <div id="message" style="display:none;"></div>
        </form>

        <div id="remainingQuantity" class="mt-2">Осталось добавить: 100 единиц.</div>

        <div id="message" style="display:none;"></div>

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            $(document).ready(function () {
                // Обработчик для добавления товара в корзину
                $('#addToCartForm').submit(function (event) {
                    event.preventDefault(); // Отменяем стандартное поведение формы

                    var productId = $('input[name="productId"]').val();
                    var quantity = parseInt($('input[name="quantity"]').val(), 10);

                    $.ajax({
                        url: '@Url.Action("AddToCart", "BrosShopCart")', // URL для добавления товара
                        type: 'POST',
                        data: { productId: productId, quantity: quantity },
                        success: function (response) {
                            $('#message').text(response.message).show(); // Показываем сообщение
                            updateCartInfo(); // Обновляем информацию о корзине
                        },
                        error: function (xhr, status, error) {
                            $('#message').text('Произошла ошибка: ' + error).show(); // Показываем сообщение об ошибке
                        }
                    });
                });

                // Функция для обновления информации о корзине
                function updateCartInfo() {
                    var productId = $('input[name="productId"]').val();

                    // Получаем текущее количество товара в корзине через AJAX
                    $.ajax({
                        url: '@Url.Action("GetCartQuantity", "BrosShopCart")', // URL для получения количества товара в корзине
                        type: 'GET',
                        data: { productId: productId },
                        success: function (response) {
                            var currentQuantity = response.currentQuantity; // Получаем текущее количество из ответа
                            var maxQuantity = 100;
                            var remainingQuantity = maxQuantity - currentQuantity;

                            // Обновляем элемент на странице, чтобы показать текущее количество и оставшееся
                            $('#remainingQuantity').text('В корзине: ' + currentQuantity + '/' + maxQuantity + ' (осталось добавить: ' + remainingQuantity + ' единиц)');
                        },
                        error: function (xhr, status, error) {
                            $('#message').text('Произошла ошибка при получении количества: ' + error).show(); // Показываем сообщение об ошибке
                        }
                    });
                }

                // Инициализация информации о корзине при загрузке страницы
                updateCartInfo();
            });
        </script>
    </div>
</div>

