@using System.Globalization
@model WebApp2.Models.CartViewModel
@{
    ViewData["Title"] = "Корзина";
    decimal totalAmount = Model.CartItems.Sum(item => 
    {
        var product = Model.Products.FirstOrDefault(p => p.BrosShopProductId == item.ProductId);
        return product != null ? product.BrosShopPrice * item.Quantity : 0;
    }); // Объявляем переменную для хранения общей суммы
}

<h2>Корзина</h2>

@if (Model.CartItems.Count == 0)
{
    <p>Ваша корзина пуста.</p>
}
else
{
    <h3>Содержимое вашей корзины:</h3>
    <table class="table cart-table">
        <thead>
            <tr>
                <th>Товар</th>
                <th>Размер</th>
                <th>Цена за штуку</th>
                <th>Количество</th>
                <th>Цена за все</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.CartItems)
            {
                var product = Model.Products.FirstOrDefault(p => p.BrosShopProductId == item.ProductId);
                if (product != null)
                {
                    decimal itemTotalPrice = product.BrosShopPrice * item.Quantity;
                    <tr>
                        <td>@product.BrosShopTitle</td>
                        <td>
                            @if (product.BrosShopProductAttributes != null && product.BrosShopProductAttributes.Any())
                            {
                                var sizeAttribute = product.BrosShopProductAttributes.FirstOrDefault(a => a.BrosShopSizeNavigation != null && a.BrosShopSizeNavigation.SizeId == item.SizeId);
                                if (sizeAttribute != null)
                                {
                                    @sizeAttribute.BrosShopSizeNavigation.Size
                                }
                                else
                                {
                                    <span>Размер не указан</span>
                                }
                            }
                            else
                            {
                                <span>Размеры не доступны</span>
                            }
                        </td>
                        <td>@product.BrosShopPrice.ToString("F2", CultureInfo.InvariantCulture)</td>
                        <td>
                            <div class="input-group" style="display: flex; align-items: center; justify-content: center; width: 138px;">
                                <button type="button" class="btn btn-secondary" style="width: 30px;" onclick="changeQuantity('@item.ProductId', '@item.SizeId', -1)">-</button>
                                <input type="number" id="quantity-@item.ProductId-@item.SizeId" name="quantity" value="@item.Quantity" min="1" max="100" step="1" class="form-control" style="width: 40px; text-align: center; margin: 0 5px;" readonly />
                                <button type="button" class="btn btn-secondary" style="width: 30px;" onclick="changeQuantity('@item.ProductId', '@item.SizeId', 1)">+</button>
                            </div>
                        </td>
                        <td id="price-@item.ProductId-@item.SizeId" data-original-price="@product.BrosShopPrice.ToString("F2", CultureInfo.InvariantCulture)">@itemTotalPrice.ToString("C", CultureInfo.CurrentCulture)</td>
                        <td>
                            <form asp-action="RemoveFromCart" method="post" style="display:inline;">
                                <input type="hidden" name="productId" value="@item.ProductId" />
                                <input type="hidden" name="sizeId" value="@item.SizeId" />
                                <button type="submit" class="btn btn-danger">Удалить</button>
                            </form>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <h4>Сумма к оплате: <span id="totalAmount">@totalAmount.ToString("C", CultureInfo.CurrentCulture)</span></h4>

    @if (!Context.Request.Cookies.ContainsKey("Token"))
    {
        <div class="alert alert-warning" role="alert">
            Вы не авторизованы. Для того чтобы сделать заказ, необходимо авторизоваться.
        </div>
        <a class="btn btn-primary" href="@Url.Action("Login", "Account")">Авторизоваться</a>
    }
    else
    {
        <form asp-action="Checkout" method="post">
            <input type="hidden" name="cartItems" value="@Html.Raw(Json.Serialize(Model.CartItems))" />
            <button type="submit" name="checkoutButton" class="btn btn-primary">Оформить заказ</button>
        </form>
    }
}

<script>
    function changeQuantity(productId, sizeId, change) {
        var quantityInput = document.getElementById('quantity-' + productId + '-' + sizeId);
        var currentQuantity = parseInt(quantityInput.value);

        // Рассчитываем новое количество
        var newQuantity = currentQuantity + change;

        // Проверяем, чтобы новое количество было в пределах 1-100
        if (newQuantity >= 1 && newQuantity <= 100) {
            quantityInput.value = newQuantity;
            updateCart(productId, sizeId, newQuantity); // Обновляем корзину на сервере
        }
    }

    function updateCart(productId, sizeId, quantity) {
        $.ajax({
            url: '@Url.Action("UpdateCart", "BrosShopCart")',
            type: 'POST',
            data: {
                productId: productId,
                sizeId: sizeId,
                quantity: quantity
            },
            success: function (response) {
                if (response.success) {
                    // Если обновление прошло успешно, обновляем отображение цены
                    updatePriceDisplay(productId, sizeId, quantity);
                    updateTotalAmount(); // Обновляем общую сумму
                } else {
                    // Если произошла ошибка, показываем сообщение пользователю
                    alert(response.message);
                }
            },
            error: function () {
                alert('Произошла ошибка при обновлении корзины. Пожалуйста, попробуйте еще раз.');
            }
        });
    }

    function updatePriceDisplay(productId, sizeId, quantity) {
        var priceCell = document.getElementById('price-' + productId + '-' + sizeId);
        var originalPrice = parseFloat(priceCell.getAttribute('data-original-price')); // Извлекаем исходную цену из атрибута
        var newPrice = originalPrice * quantity; // Рассчитываем новую цену
        priceCell.innerText = newPrice.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' }); // Форматируем цену
    }

    function updateTotalAmount() {
        var totalAmount = 0;
        // Проходим по всем элементам корзины и суммируем их цены
        document.querySelectorAll('.cart-table tbody tr').forEach(function (row) {
            var priceCell = row.querySelector('td[id^="price-"]');
            var quantityInput = row.querySelector('input[name="quantity"]'); // Получаем поле ввода количества

            if (priceCell && quantityInput) {
                // Извлекаем общую цену для товара
                var itemTotalPrice = parseFloat(priceCell.innerText.replace(/[^0-9,.-]+/g, "").replace(",", "."));
                var quantity = parseInt(quantityInput.value); // Получаем текущее количество
                totalAmount += itemTotalPrice; // Суммируем общую стоимость
            }
        });
        var totalAmountDisplay = document.getElementById('totalAmount');
        totalAmountDisplay.innerText = totalAmount.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' }); // Форматируем общую сумму
    }
</script>

